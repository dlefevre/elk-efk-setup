[SERVICE]
    # Flush
    # =====
    # set an interval of seconds before to flush records to a destination
    flush        5

    # Daemon
    # ======
    # instruct Fluent Bit to run in foreground or background mode.
    daemon       Off

    # Log_Level
    # =========
    # Set the verbosity level of the service, values can be:
    #
    # - error
    # - warning
    # - info
    # - debug
    # - trace
    #
    # by default 'info' is set, that means it includes 'error' and 'warning'.
    log_level    info

    # Parsers File
    # ============
    # specify an optional 'Parsers' configuration file
    parsers_file parsers.conf

    # Plugins File
    # ============
    # specify an optional 'Plugins' configuration file to load external plugins.
    plugins_file plugins.conf

    # HTTP Server
    # ===========
    # Enable/Disable the built-in HTTP Server for metrics
    http_server  Off
    http_listen  0.0.0.0
    http_port    2020

    # Storage
    # =======
    # Fluent Bit can use memory and filesystem buffering based mechanisms
    #
    # - https://docs.fluentbit.io/manual/administration/buffering-and-storage
    #
    # storage metrics
    # ---------------
    # publish storage pipeline metrics in '/api/v1/storage'. The metrics are
    # exported only if the 'http_server' optoin is enabled.
    #
    storage.metrics on

    # storage.path
    # ------------
    # absolute file system path to store filesystem data buffers (chunks).
    #
    # storage.path /tmp/storage

    # storage.sync
    # ------------
    # configure the synchronization mode used to store the data into the
    # filesystem. It can take the values normal or full.
    #
    # storage.sync normal

    # storage.checksum
    # ----------------
    # enable the data integrity check when writing and reading data from the
    # filesystem. The storage layer uses the CRC32 algorithm.
    #
    # storage.checksum off

    # storage.backlog.mem_limit
    # -------------------------
    # if storage.path is set, Fluent Bit will look for data chunks that were
    # not delivered and are still in the storage layer, these are called
    # backlog data. This option configure a hint of maximum value of memory
    # to use when processing these records.
    #
    # storage.backlog.mem_limit 5M

[INPUT]
    Name tail
    Path /opt/wildfly/standalone/log/server.log
    DB /var/tmp/tail.db
    Tag wildfly

    Multiline on
    Parser_Firstline wildfly_raw

[FILTER]
    Name record_modifier
    Match *
    Record agent.hostname ${HOSTNAME}
    Record agent.name {{ inventory_hostname }}
    Record agent.type fluentbit
    Record agent.id {{ system_uuid }}
    Record agent.ephemeral_id {{ system_uuid }}
    Record agent.version unknown
    Record log.file.path /opt/wildfly/standalone/log/server.log
    Record log.file.offset 0
    Record host.hostname ${HOSTNAME}
    Record host.name {{ inventory_hostname }}
    Record host.mac {{ ansible_default_ipv4.macaddress}}
    Record host.id {{ system_uuid }}
    Record host.containerized false
    Record host.ip {{ ansible_default_ipv4.address }},{{ ansible_all_ipv6_addresses[0] }}
    Record host.os.kernel {{ ansible_kernel }}
    Record host.os.family {{ ansible_os_family }}
    Record host.os.name Amazon Linux
    Record host.os.version 2
    Record host.os.codename Karoo
    Record host.os.platform amzn
    Record host.architecture {{ ansible_architecture }}
    Record fields.source wildfly
    Record input.type log

[OUTPUT]
    Name forward
    Match *
    Host fluentd
    Port 24224
    Self_Hostname workload-fluentd-1
    tls on
    tls.verify on
    tls.key_file /etc/td-agent-bit/node.key
    tls.crt_file /etc/td-agent-bit/node-fullchain.pem
    tls.ca_file /etc/td-agent-bit/ca.pem