---

- name: Check if logstash users file exists
  stat: path=/home/ec2-user/.vars/logstash_users.yaml
  register: stat_logstash_users
  become: no
  delegate_to: localhost
  connection: local

- name: Load logstash users
  include_vars: file=/home/ec2-user/.vars/logstash_users.yaml
  when: stat_logstash_users.stat.exists

- name: Generate random passwords for logstash users
  set_fact:
    logstash_users:
      logstash_internal: "{{ lookup('password', '/dev/null length=20 chars=ascii_letters,digits') }}"
  when: not stat_logstash_users.stat.exists

- name: Rewrite logstash users file
  template: src=logstash-users.yaml.j2 dest=/home/ec2-user/.vars/logstash_users.yaml mode=0644
  become: no
  delegate_to: localhost
  connection: local

- name: Reload external variables
  import_role: name=reload-vars

- block:

    - name: Define logstash_write role
      uri:
        url: "{{ elasticsearch_url }}/_security/role/logstash_writer"
        body:
          cluster:
            - manage_index_templates
            - monitor
            - manage_ilm
          indices:
            - names: ["*"]
              privileges:
                - write
                - create
                - delete
                - create_index
                - manage
                - manage_ilm
        user: "{{ elasticsearch_user }}"
        password: "{{ elasticsearch_passwords[elasticsearch_user] }}"
        force_basic_auth: yes
        method: PUT
        body_format: json
      register: uri_logstash_internal
      failed_when: uri_logstash_internal.status != 200

    - name: Define logstash_internal user
      uri:
        url: "{{ elasticsearch_url }}/_security/user/logstash_internal"
        body:
          password: "{{ logstash_users.logstash_internal }}"
          roles: ["logstash_writer"]
          full_name: "Internal Logstash User"
        user: "{{ elasticsearch_user }}"
        password: "{{ elasticsearch_passwords[elasticsearch_user] }}"
        force_basic_auth: yes
        method: PUT
        body_format: json
      register: uri_logstash_internal
      failed_when: uri_logstash_internal.status != 200

  become: no
  delegate_to: localhost
  connection: local

- name: Provision configuration file
  template: src=logstash.yml.j2 dest=/etc/logstash/logstash.yml mode=0600 owner=logstash group=logstash
  notify: Restart Logstash

- name: Provision pipelines
  template: 
    src: "{{ item }}.conf.j2"
    dest: "/etc/logstash/conf.d/{{ item }}.conf"
    mode: "0600"
    owner: logstash
    group: logstash
  with_items:
    - output
    - beats
    - jboss
  notify: Restart Logstash

- name: Provision jvm options
  template: src=jvm.options.j2 dest=/etc/logstash/jvm.options mode=0644
  notify: Restart Logstash

- name: Provision jvm_exporter config
  template: src=jvm_exporter.yaml.j2 dest=/etc/logstash/jvm_exporter.yaml mode=0644
  notify: Restart Logstash
